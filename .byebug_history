exit
json[:errors]
response.status
response.success?
response.status
raise json[:errors].join(', ')
json[:errors].join(', ')
json
json[:errors].json(', ')
json
response
OpenStruct.new(json[:errors])
OpenStruct
OpenScruct.new json[:errors]
json[:errors]
json
document = OpenStruct.new(json[:errors])
json
exit
response.success?
response.success
json
d.key
d = OpenStruct.new(json[:document])
json = JSON.parse(response.body, symbolize_names: true)
JSON.parse(response.body, symbolize_names: true)
response.body
response
exit
response
exit
response
exit
response
exit
response
exit
response
exit
response
exit
nil.nil?
nil.present?
hash
hash.merge!(foo: 'bar')
hash
hash.merge(foo: 'bar')
hash = {}
body
body.merge(deadline_at: deadline_at) if deadline_at
exit
response
respone
exit
          end
            req.body = body.to_json
            req.headers['Content-Type'] = 'application/json'
            req.url request_path
conn.post do |req|
          end
            req.body = body.to_json
            req.headers['Content-Type'] = 'application/json'
            req.url url
conn.post do |req|
body.to_json
          end
            req.body = body
            req.headers['Content-Type'] = 'application/json'
            req.url url
conn.post do |req|
          end
            request.body = body
            request.headers['Content-Type'] = 'application/json'
            request.url url
conn.post do |request|
url
exit
          end
            request.body = body
            request.headers['Content-Type'] = 'application/json'
            request.url url
conn.post do |request|
          end
            request.body = body
            request.headers['Content-Type'] = 'application/json'
            request.url url
conn.post do |request|
conn
          end
            request.body = body
            headers['Content-Type'] = 'application/json'
            request.url url
conn.post do |request|
          end
            request.body = body
            headers['Content-Type'] = 'application/json'
            request.url url
conn.post do |request|
          end
            request.body = body
            headers['Content-Type'] = 'application/json'
            request.url "/api/v1/documents?access_token=#{Clicksign::API.access_token}"
conn.post do |request|
body
exit
body
exit
          }
            locale: 'pt-BR',
            auto_close: true,
            deadline_at: '24/10/2018',
            content_base64: content_base64,
            path: '/teste',
            }body = {
              locale: 'pt-BR',
              auto_close: true,
              deadline_at: '24/10/2018',
              content_base64: content_base64,
              path: '/teste',
body = {
1
          end
            }
              locale: 'pt-BR',
              auto_close: true,
              deadline_at: '24/10/2018',
              content_base64: content_base64,
              path: '/teste',
            request.body = {
            headers['Content-Type'] = 'application/json'
            request.url "/api/v1/documents?access_token=#{Clicksign::API.access_token}"
conn.post do |request|
Clicksign::API.access_token
exit
Clicksign::API.access_token
exit
Clicksign::API.access_token
conn
encoded_file
exit
Base64.decode64 encoded_file
Base64.decode64encoded_file
encoded_file
exit
Clicksign::API.url
conn ||= Faraday.new(url: Clicksign::API.url)
conn
      end
        @conn ||= Faraday.new(url: Clicksign::API.url)
def conn
conn
Base64.decode64(encoded)
encoded = Base64.encode64 File.read(file)conn
Base64.encode64 File.read(file)
File.exist? file
Base64.encode64 File.open(file)
Base64.encode64 File.open(path)
Base64.encode64 file.open
Base64.encode64 file
require 'base64'
block
file
